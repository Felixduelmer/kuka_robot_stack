// Generated by gencpp from file iiwa_msgs/RedundancyInformation.msg
// DO NOT EDIT!


#ifndef IIWA_MSGS_MESSAGE_REDUNDANCYINFORMATION_H
#define IIWA_MSGS_MESSAGE_REDUNDANCYINFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iiwa_msgs
{
template <class ContainerAllocator>
struct RedundancyInformation_
{
  typedef RedundancyInformation_<ContainerAllocator> Type;

  RedundancyInformation_()
    : e1(0.0)
    , status(0)
    , turn(0)  {
    }
  RedundancyInformation_(const ContainerAllocator& _alloc)
    : e1(0.0)
    , status(0)
    , turn(0)  {
  (void)_alloc;
    }



   typedef double _e1_type;
  _e1_type e1;

   typedef int32_t _status_type;
  _status_type status;

   typedef int32_t _turn_type;
  _turn_type turn;





  typedef boost::shared_ptr< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> const> ConstPtr;

}; // struct RedundancyInformation_

typedef ::iiwa_msgs::RedundancyInformation_<std::allocator<void> > RedundancyInformation;

typedef boost::shared_ptr< ::iiwa_msgs::RedundancyInformation > RedundancyInformationPtr;
typedef boost::shared_ptr< ::iiwa_msgs::RedundancyInformation const> RedundancyInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator1> & lhs, const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator2> & rhs)
{
  return lhs.e1 == rhs.e1 &&
    lhs.status == rhs.status &&
    lhs.turn == rhs.turn;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator1> & lhs, const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iiwa_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "890d08bd36db91494028e6c2e0f4ecc2";
  }

  static const char* value(const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x890d08bd36db9149ULL;
  static const uint64_t static_value2 = 0x4028e6c2e0f4ecc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iiwa_msgs/RedundancyInformation";
  }

  static const char* value(const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# E1 parameter\n"
"# Specifies Angle of the elbow joint.\n"
"float64 e1\n"
"\n"
"# Status parameter\n"
"#   Bit 0: 1 - The robot is working above its head\n"
"#          0 - The robot is working in the ground area\n"
"#   Bit 1: 1 - Angle A4 < 0°\n"
"#          0 - Angle A4 >= 0°\n"
"#   Bit 2: 1 - Angle A6 <= 0\n"
"#          0 - Angle A6 > 0\n"
"int32 status\n"
"\n"
"# Turn parameter\n"
"# According to Sunrise handbook this is not used for the iiwa.\n"
"int32 turn\n"
;
  }

  static const char* value(const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.e1);
      stream.next(m.status);
      stream.next(m.turn);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RedundancyInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iiwa_msgs::RedundancyInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iiwa_msgs::RedundancyInformation_<ContainerAllocator>& v)
  {
    s << indent << "e1: ";
    Printer<double>::stream(s, indent + "  ", v.e1);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "turn: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IIWA_MSGS_MESSAGE_REDUNDANCYINFORMATION_H
